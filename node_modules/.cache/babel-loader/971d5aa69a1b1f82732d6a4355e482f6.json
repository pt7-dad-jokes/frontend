{"ast":null,"code":"import _slicedToArray from \"/Users/codycaro/Desktop/LambdaProjects/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/codycaro/Desktop/LambdaProjects/frontend/src/components/LoginForm.js\";\nimport React, { useState } from \"react\";\nimport { Form, Field, withFormik } from \"formik\";\n\nfunction LoginForm() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        users = _useState2[0],\n        setUsers = _useState2[1];\n\n  useEffect(() => {\n    if (status) {\n      setAnimals([...animals, status]);\n    }\n  }, [status]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(Field, {\n    component: \"input\",\n    type: \"text\",\n    name: \"username\",\n    placeholder: \"Username/Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  })));\n}\n\nconst formikLoginHOC = withFormik({\n  mapPropsToValues({\n    username,\n    email,\n    password,\n    rememberMe\n  }) {\n    return {\n      username: username || \"\",\n      email: email || \"\",\n      password: password || \"\",\n      rememberMe: rememberMe || false\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    species: Yup.string().required(\"not a good input\"),\n    size: Yup.number().required(),\n    notes: Yup.string()\n  }),\n\n  handleSubmit(values, {\n    setStatus,\n    resetForm\n  }) {\n    axios.post(\"https://reqres.in/api/users\", values).then(res => {\n      console.log(\"handleSubmit: then: res: \", res);\n      setStatus(res.data);\n      resetForm();\n    }).catch(err => console.error(\"handleSubmit: catch: err: \", err));\n  }\n\n});\nconst LoginFormWithFormik = formikLoginHOC(LoginForm);\nexport default LoginFormWithFormik;","map":{"version":3,"sources":["/Users/codycaro/Desktop/LambdaProjects/frontend/src/components/LoginForm.js"],"names":["React","useState","Form","Field","withFormik","LoginForm","users","setUsers","useEffect","status","setAnimals","animals","formikLoginHOC","mapPropsToValues","username","email","password","rememberMe","validationSchema","Yup","object","shape","species","string","required","size","number","notes","handleSubmit","values","setStatus","resetForm","axios","post","then","res","console","log","data","catch","err","error","LoginFormWithFormik"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,QAAwC,QAAxC;;AAEA,SAASC,SAAT,GAAqB;AAAA,oBACOJ,QAAQ,CAAC,EAAD,CADf;AAAA;AAAA,QACZK,KADY;AAAA,QACLC,QADK;;AAGnBC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIC,MAAJ,EAAY;AACVC,MAAAA,UAAU,CAAC,CAAC,GAAGC,OAAJ,EAAaF,MAAb,CAAD,CAAV;AACD;AACF,GAJQ,EAIN,CAACA,MAAD,CAJM,CAAT;AAMA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,WAAW,EAAC,gBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAYD;;AAED,MAAMG,cAAc,GAAGR,UAAU,CAAC;AAChCS,EAAAA,gBAAgB,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA;AAA7B,GAAD,EAA4C;AAC1D,WAAO;AACLH,MAAAA,QAAQ,EAAEA,QAAQ,IAAI,EADjB;AAELC,MAAAA,KAAK,EAAEA,KAAK,IAAI,EAFX;AAGLC,MAAAA,QAAQ,EAAEA,QAAQ,IAAI,EAHjB;AAILC,MAAAA,UAAU,EAAEA,UAAU,IAAI;AAJrB,KAAP;AAMD,GAR+B;;AAShCC,EAAAA,gBAAgB,EAAEC,GAAG,CAACC,MAAJ,GAAaC,KAAb,CAAmB;AACnCC,IAAAA,OAAO,EAAEH,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB,CAD0B;AAEnCC,IAAAA,IAAI,EAAEN,GAAG,CAACO,MAAJ,GAAaF,QAAb,EAF6B;AAGnCG,IAAAA,KAAK,EAAER,GAAG,CAACI,MAAJ;AAH4B,GAAnB,CATc;;AAchCK,EAAAA,YAAY,CAACC,MAAD,EAAS;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAT,EAAmC;AAC7CC,IAAAA,KAAK,CACFC,IADH,CACQ,6BADR,EACuCJ,MADvC,EAEGK,IAFH,CAEQC,GAAG,IAAI;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,GAAzC;AACAL,MAAAA,SAAS,CAACK,GAAG,CAACG,IAAL,CAAT;AACAP,MAAAA,SAAS;AACV,KANH,EAOGQ,KAPH,CAOSC,GAAG,IAAIJ,OAAO,CAACK,KAAR,CAAc,4BAAd,EAA4CD,GAA5C,CAPhB;AAQD;;AAvB+B,CAAD,CAAjC;AAyBA,MAAME,mBAAmB,GAAG9B,cAAc,CAACP,SAAD,CAA1C;AAEA,eAAeqC,mBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Field, withFormik } from \"formik\";\n\nfunction LoginForm() {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    if (status) {\n      setAnimals([...animals, status]);\n    }\n  }, [status]);\n\n  return (\n    <div>\n      <Form>\n        <Field\n          component=\"input\"\n          type=\"text\"\n          name=\"username\"\n          placeholder=\"Username/Email\"\n        />\n      </Form>\n    </div>\n  );\n}\n\nconst formikLoginHOC = withFormik({\n  mapPropsToValues({ username, email, password, rememberMe }) {\n    return {\n      username: username || \"\",\n      email: email || \"\",\n      password: password || \"\",\n      rememberMe: rememberMe || false\n    };\n  },\n  validationSchema: Yup.object().shape({\n    species: Yup.string().required(\"not a good input\"),\n    size: Yup.number().required(),\n    notes: Yup.string()\n  }),\n  handleSubmit(values, { setStatus, resetForm }) {\n    axios\n      .post(\"https://reqres.in/api/users\", values)\n      .then(res => {\n        console.log(\"handleSubmit: then: res: \", res);\n        setStatus(res.data);\n        resetForm();\n      })\n      .catch(err => console.error(\"handleSubmit: catch: err: \", err));\n  }\n});\nconst LoginFormWithFormik = formikLoginHOC(LoginForm);\n\nexport default LoginFormWithFormik;\n"]},"metadata":{},"sourceType":"module"}