{"ast":null,"code":"var _jsxFileName = \"C:\\\\Lambda\\\\Unit 2 build week\\\\frontend\\\\src\\\\components\\\\RegForm.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\nfunction RegForm({\n  values,\n  errors,\n  touched,\n  isSubmitting\n}) {\n  return React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, touched.email && errors.email && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, errors.email), React.createElement(Field, {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, touched.username && errors.username && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, errors.username), React.createElement(Field, {\n    type: \"text\",\n    name: \"username\",\n    placeholder: \"Username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, touched.password && errors.password && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, errors.password), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, touched.confirmpassword && errors.confirmpassword && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, errors.confirmpassword), React.createElement(Field, {\n    type: \"password\",\n    name: \"confirmpassword\",\n    placeholder: \"Confirm Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Submit\"));\n}\n\nconst FormikRegForm = withFormik({\n  mapPropsToValues({\n    email,\n    username,\n    password,\n    confirmpassword\n  }) {\n    return {\n      email: email || \"\",\n      username: username || \"\",\n      password: password || \"\",\n      confirmpassword: confirmpassword || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email(\"Email not valid\").required('Please enter an email'),\n    username: Yup.string().required('Please enter a username'),\n    password: Yup.string().min(6, \"Password must be 6 characters or longer\").required('Please enter a password'),\n    confirmpassword: Yup.string().min(6, \"Password must be 6 characters or longer\").required('Please confirm passoword')\n  }),\n\n  handleSubmit(values, {\n    resetForm,\n    setErrors,\n    setSubmitting\n  }) {\n    if (values.email === \"alreadytaken@atb.dev\") {\n      setErrors({\n        email: \"That email is already taken\"\n      });\n    } else {\n      axios.post(\"https://reqres.in/api/register/\", values).then(res => {\n        console.log(res); // Data was created successfully and logs to console\n\n        resetForm();\n        setSubmitting(false);\n      }).catch(err => {\n        console.log(err); // There was an error creating the data and logs to console\n\n        setSubmitting(false);\n      });\n    }\n  }\n\n})(RegForm);\nexport default FormikRegForm;","map":{"version":3,"sources":["C:\\Lambda\\Unit 2 build week\\frontend\\src\\components\\RegForm.js"],"names":["React","ReactDOM","withFormik","Form","Field","Yup","axios","RegForm","values","errors","touched","isSubmitting","email","username","password","confirmpassword","FormikRegForm","mapPropsToValues","validationSchema","object","shape","string","required","min","handleSubmit","resetForm","setErrors","setSubmitting","post","then","res","console","log","catch","err"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { withFormik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\n\r\n  function RegForm({ values, errors, touched, isSubmitting }) {\r\n    return (\r\n      <Form>\r\n        <div>\r\n          {touched.email && errors.email && <p>{errors.email}</p>}\r\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\r\n        </div>\r\n        <div>\r\n          {touched.username && errors.username && <p>{errors.username}</p>}\r\n          <Field type=\"text\" name=\"username\" placeholder=\"Username\" />\r\n        </div>\r\n        <div>\r\n          {touched.password && errors.password && <p>{errors.password}</p>}\r\n          <Field type=\"password\" name=\"password\" placeholder=\"Password\" />\r\n        </div>\r\n        <div>\r\n          {touched.confirmpassword && errors.confirmpassword && <p>{errors.confirmpassword}</p>}\r\n          <Field type=\"password\" name=\"confirmpassword\" placeholder=\"Confirm Password\" />\r\n        </div>\r\n      <button type=\"submit\" disabled={isSubmitting}>\r\n                Submit\r\n              </button>\r\n      </Form> \r\n    );\r\n  }\r\n\r\nconst FormikRegForm = withFormik({\r\n  mapPropsToValues({ email, username, password, confirmpassword  }) {\r\n    return {\r\n      email: email || \"\",\r\n      username: username || \"\",\r\n      password: password || \"\",\r\n      confirmpassword: confirmpassword || \"\"\r\n    };\r\n  },\r\n  validationSchema: Yup.object().shape({\r\n    email: Yup.string().email(\"Email not valid\").required('Please enter an email'),\r\n    username: Yup.string().required('Please enter a username'),\r\n    password: Yup.string().min(6, \"Password must be 6 characters or longer\").required('Please enter a password'),\r\n    confirmpassword: Yup.string().min(6, \"Password must be 6 characters or longer\").required('Please confirm passoword')\r\n  }),\r\n  handleSubmit(values, { resetForm, setErrors, setSubmitting }) {\r\n    if (values.email === \"alreadytaken@atb.dev\") {\r\n      setErrors({ email: \"That email is already taken\" });\r\n    } else {\r\n      axios\r\n        .post(\"https://reqres.in/api/register/\", values)\r\n        .then(res => {\r\n          console.log(res); // Data was created successfully and logs to console\r\n          resetForm();\r\n          setSubmitting(false);\r\n        })\r\n        .catch(err => {\r\n          console.log(err); // There was an error creating the data and logs to console\r\n          setSubmitting(false);\r\n        });\r\n    }\r\n  }\r\n})(RegForm);\r\n\r\nexport default FormikRegForm;"]},"metadata":{},"sourceType":"module"}